These are building up in the codebase, temporarily dumping here until PRs are made:

// TODO: Stop trying to read .DS_Store
The application panicked (crashed).
Message:  could not read file "/Users/tsujp/Desktop/tikan/circuit/lib/state/.DS_Store" into string
Location: tooling/nargo/src/lib.rs:75
This is a bug. We may have already fixed this in newer versions of Nargo so try searching for similar issues at https://github.com/noir-lang/noir/issues/.
If there isn't an open issue for this bug, consider opening one at https://github.com/noir-lang/noir/issues/new?labels=bug&template=bug_report.yml

// TODO: This attempt at DRY produces a compiler error. Make a PR for it.
// [tikan_lib] Testing test::pass::special::pawn_promote_vertical_black... error: Internal Consistency Evaluators Errors:
//                     This is likely a bug. Consider Opening an issue at https://github.com/noir-lang/noir/issues
//   ┌─ /Users/tsujp/programming/~aztec/tikan/circuit/lib/state/src/game.nr:1:1
//   │
// 1 │ use dep::std::{wrapping_add, wrapping_mul, wrapping_sub};
//   │ - ICE: Expected "a numeric value", found "[Var(AcirVar(1019), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1019), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1018), NumericType(Unsigned { bit_size: 64 }))]"
//   │
//   = Call stack:
//     1. /Users/tsujp/programming/~aztec/tikan/circuit/lib/src/test/pass/special.nr:89:17
//     2. /Users/tsujp/programming/~aztec/tikan/circuit/lib/src/test/util.nr:235:33
//     3. /Users/tsujp/programming/~aztec/tikan/circuit/lib/state/src/game.nr:334:21
// #[test]
// fn pawn_promote_vertical_black() {
//     let piece = t::Piece::PAWN;
//     let single_move_delta = 8;

//     let white = t::sg::init_fog(
//         t::Player::WHITE,
//         [(t::bb::WHITE, t::bb::PAWN, 0xFF000000000000)]
//     ).game;
//     let sut_white = cc_promote(white, piece);

//     let black = t::sg::init_fog(t::Player::BLACK, [(t::bb::BLACK, t::bb::PAWN, 0xFF00)]).game;
//     let sut_black = cc_promote(black, piece);

//     let suts = [sut_white, sut_black];

//     // Index into poor-man's enum `Promote`.
//     let mut promote_piece: u8 = 0;

//     // We don't really need the SeedGame structure for these tests so it's not used for speed.
//     for from in PAWN_START_RANKS {
//         let data: (u1, u8) = if from > 15 {
//             // White promotion at black's end.
//             let to = from + single_move_delta;
//             (0, to)
//             // sut_white(from, to, promote_piece);
//         } else {
//             // Black promotion at white's end.
//             let to = from - single_move_delta;
//             (1, to)
//             // sut_black(from, to, promote_piece);
//         };

//         let x = suts[data.0];
//         let z = data.1;
//         let y = x(from, z, promote_piece);

//         let promoted_pawn = (2 as Field).pow_32(from as Field) as u64;

//         promote_piece = dep::std::wrapping_add(promote_piece, 1);

//     }
// }
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
`@noir-lang/noir_wasm` should find the path to the circuit entry from the
Nargo.toml file and not just assume it's under the `src` folder in the same
directory as said `Nargo.toml`.

i.e. this structure does not work currently if you try and compile using
`@noir-lang/noir_wasm` for said reasons, even when within Nargo.toml there is:

```toml
entry = 'foo_circuit.nr'
```

```
./Nargo.toml
./foo_circuit.nr
```

Whereas this does work:
```
./Nargo.toml
./src/foo_circuit.nr
```
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
