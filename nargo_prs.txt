These are building up in the codebase, temporarily dumping here until PRs are made:

// TODO: Stop trying to read .DS_Store
The application panicked (crashed).
Message:  could not read file "/Users/tsujp/Desktop/tikan/circuit/lib/state/.DS_Store" into string
Location: tooling/nargo/src/lib.rs:75
This is a bug. We may have already fixed this in newer versions of Nargo so try searching for similar issues at https://github.com/noir-lang/noir/issues/.
If there isn't an open issue for this bug, consider opening one at https://github.com/noir-lang/noir/issues/new?labels=bug&template=bug_report.yml

// TODO: This attempt at DRY produces a compiler error. Make a PR for it.
// [tikan_lib] Testing test::pass::special::pawn_promote_vertical_black... error: Internal Consistency Evaluators Errors:
//                     This is likely a bug. Consider Opening an issue at https://github.com/noir-lang/noir/issues
//   ┌─ /Users/tsujp/programming/~aztec/tikan/circuit/lib/state/src/game.nr:1:1
//   │
// 1 │ use dep::std::{wrapping_add, wrapping_mul, wrapping_sub};
//   │ - ICE: Expected "a numeric value", found "[Var(AcirVar(1019), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1020), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1019), NumericType(Unsigned { bit_size: 64 })), Var(AcirVar(1018), NumericType(Unsigned { bit_size: 64 }))]"
//   │
//   = Call stack:
//     1. /Users/tsujp/programming/~aztec/tikan/circuit/lib/src/test/pass/special.nr:89:17
//     2. /Users/tsujp/programming/~aztec/tikan/circuit/lib/src/test/util.nr:235:33
//     3. /Users/tsujp/programming/~aztec/tikan/circuit/lib/state/src/game.nr:334:21
// #[test]
// fn pawn_promote_vertical_black() {
//     let piece = t::Piece::PAWN;
//     let single_move_delta = 8;

//     let white = t::sg::init_fog(
//         t::Player::WHITE,
//         [(t::bb::WHITE, t::bb::PAWN, 0xFF000000000000)]
//     ).game;
//     let sut_white = cc_promote(white, piece);

//     let black = t::sg::init_fog(t::Player::BLACK, [(t::bb::BLACK, t::bb::PAWN, 0xFF00)]).game;
//     let sut_black = cc_promote(black, piece);

//     let suts = [sut_white, sut_black];

//     // Index into poor-man's enum `Promote`.
//     let mut promote_piece: u2 = 0;

//     // We don't really need the SeedGame structure for these tests so it's not used for speed.
//     for from in PAWN_START_RANKS {
//         let data: (u1, u6) = if from > 15 {
//             // White promotion at black's end.
//             let to = from + single_move_delta;
//             (0, to)
//             // sut_white(from, to, promote_piece);
//         } else {
//             // Black promotion at white's end.
//             let to = from - single_move_delta;
//             (1, to)
//             // sut_black(from, to, promote_piece);
//         };

//         let x = suts[data.0];
//         let z = data.1;
//         let y = x(from, z, promote_piece);

//         let promoted_pawn = (2 as Field).pow_32(from as Field) as u64;

//         promote_piece = dep::std::wrapping_add(promote_piece, 1);

//     }
// }



// TODO: PR for nargo seems to be showing line number after comments making it hard to see the actual line number, or the parsing is just omega borked.



/// ------------------------------------------------------------------
/// ------------------------------------------------------------------

This one is probably to do with the chosen error message.

In game.nr:196 the loop:
```
for bb_idx in BitboardOf::KNIGHT..BitboardOf::PAWN + 1 { ...
```

Where BitboardOf::PAWN is (from types.nr:24):
```
    global PAWN: u3 = 7;
```

Fails with error message:

```
[tikan_player] Testing valid_turn_advances_game... error: Could not determine loop bound at compile-time
    ┌─ /Users/tsujp/Desktop/tikan/circuit/lib/state/game.nr:195:44
    │
195 │         for bb_idx in BitboardOf::KNIGHT..(BitboardOf::PAWN + 1) {
    │                                            --------------------
    │
    = Call stack:
      1. /Users/tsujp/Desktop/tikan/circuit/player/player.nr:128:13
      2. /Users/tsujp/Desktop/tikan/circuit/player/player.nr:21:25
      3. /Users/tsujp/Desktop/tikan/circuit/lib/state/game.nr:195:44
```

This is because our PAWN value is the maximum value of a u3 (i.e. 7) and so attempting
to +1 this value is an error which gets swallowed and reported as an inability to
determine loop bound at compile-time. The latter error is correct but not the reason why.
In this case the fix is:
```
for bb_idx in BitboardOf::KNIGHT..(BitboardOf::PAWN as u4 + 1) {
```
Which is ugly to manually do and the compiler should probably do itself since it
doesn't complain about a loop between a u3 and u4 which is what is now happening.

Found this out as I removed the fog bitboard which moved BitboardOf from u4 back to u3.

Or add syntax from Rust (because an elipses is way too close to double full-stop) that includes
the end index, i.e. 0..=2 loops 0, 1, 2 whereas 0..2 loops 0, 1. Elipses 0...2 is too close to 0..2.

Update: the compiler does complain about looping within the range u3..u4 it just
couldn't parse the BitboardOf stuff properly, when I did this:
```
let loop_to: u4 = (BitboardOf::PAWN as u4 + 1);
for bb_idx in BitboardOf::KNIGHT..loop_to {
```
It now complains:
```
error: Expected type u3, found type u4
    ┌─ /Users/tsujp/Desktop/tikan/circuit/lib/state/game.nr:197:23
    │
197 │         for bb_idx in BitboardOf::KNIGHT..loop_to {
```
Trying:
```
for bb_idx in (BitboardOf::KNIGHT as u4)..((BitboardOf::PAWN as u4) + 1); {
```
Still does not work however, it breaks parsing by the compiler.

/// ------------------------------------------------------------------
/// ------------------------------------------------------------------

Globals computed from other globals?

So if I have:
```
global REQUIRED_BITBOARDS: Field = 8;
```
I want to be able to also do:
```
global PLAYER_STATE_BITBOARDS: Field = REQUIRED_BITBOARDS - 2;
```
Instead of having to hardcode it as:
```
global PLAYER_STATE_BITBOARDS: Field = 6;
```
As long as the expression ONLY involves other globals I think this should be fine.

/// ------------------------------------------------------------------
/// ------------------------------------------------------------------