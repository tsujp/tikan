direction: down

...@_base

# Title and blurb

explanation: |md
    # Move circuit
    
    Each player, white and black, has their own circuit of this form where\
    they would be the prover and their opponent the verifier.

    The circuit logic is represented here as a Mealy finite state machine.
| { near: top-center }

# Diagram-proper

# pro: Prover
# ver: Verifier

white.shape: circle

entry: {
    label: ' '
    class: [entry]
}

entry -> white



# For Jordan later at MSAC:
# Mealy FSM, add styles to _base.d2 for the entry position and each subsequent 
#   state. Since using Mealy the transitions can be annotated with functions
#   and their arguments like P and V etc so get onto that.
# Good article on Mealy, replicate this type of diagram: https://fastbitlab.com/mealy-and-moore-machine/
# Copy base logic and import from: https://github.com/golang-queue/queue/blob/master/images/_base.d2